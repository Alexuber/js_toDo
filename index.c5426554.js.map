{"mappings":"IACAA,EAAe,C,WADsB,oBAAXC,QAA0BA,OAAOC,YAAcD,OAAOC,WAAWC,KAAKF,SCGhG,IAAIG,EACJ,MAAMC,EAAQ,IAAIC,WAAW,IACd,SAAAC,IAEb,IAAKH,IAEHA,EAAoC,oBAAXH,QAA0BA,OAAOO,iBAAmBP,OAAOO,gBAAgBL,KAAKF,SAEpGG,GACH,MAAM,IAAIK,MAAM,4GAIpB,OAAOL,EAAgBC,E,CCVzB,MAAMK,EAAY,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,MAAM,IAGzC,SAASC,EAAgBC,EAAKC,EAAS,GAG5C,OAAQP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,MAAMC,a,KCavfC,EAxBA,SAAYC,EAASC,EAAKJ,GACxB,GAAIjB,EAAOE,aAAemB,IAAQD,EAChC,OAAOpB,EAAOE,aAIhB,MAAMoB,GADNF,EAAUA,GAAW,IACAG,SAAWH,EAAQI,KAAOjB,KAK/C,GAHAe,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPJ,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBU,EAAIJ,EAASN,GAAKW,EAAKX,GAGzB,OAAOU,C,CAGT,OAAON,EAAgBO,E,ECdzB,MAAMG,EAAOC,SAASC,cAAc,QAC9BC,EAAUF,SAASC,cAAc,gBACjCE,EAAaH,SAASC,cAAc,cAEpCG,EAAW,GAiBjBL,EAAKM,iBAAiB,UAftB,SAA0BC,GACxBA,EAAEC,iBACF,MAAMC,EAAaN,EAAQO,MACrBC,EAAO,CACXC,GAAIlB,IACJmB,SAAU,WACVC,OAAQ,cACRC,KAAMN,GAERJ,EAASlB,KAAKwB,GACdK,aAAaC,QAAQ,OAAQC,KAAKC,UAAUd,IAO9C,WACE,IAAIe,EAEJ,GAA4B,IAAxBJ,aAAaK,OACfD,EAAS,kGAGJ,CACMF,KAAKI,MAAMN,aAAaO,QAAQ,Q,CAQ7CnB,EAAWoB,WAAW,YAAaJ,E,CArBnCK,E","sources":["node_modules/uuid/dist/esm-browser/native.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/v4.js","src/index.js"],"sourcesContent":["const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","// можливість додавати справи\n// можливість редагувати текст\n// можливість видалення\n// можл-ть фільтрації\n// можл-ть надати статус \"виконано\"\n// можл-ть встановити пріоритет\n// saving\n// check localStorage on already having data\n// insert data from localStorage on our page\nimport { v4 as uuidv4 } from 'uuid';\n\nconst form = document.querySelector('form');\nconst valueEl = document.querySelector('.input-value');\nconst toDoListEl = document.querySelector('.todo-list');\n\nconst arrTasks = [];\n\nfunction handleSubmitForm(e) {\n  e.preventDefault();\n  const inputValue = valueEl.value;\n  const task = {\n    id: uuidv4(),\n    priority: 'standart',\n    status: 'in progress',\n    text: inputValue,\n  };\n  arrTasks.push(task);\n  localStorage.setItem('data', JSON.stringify(arrTasks));\n\n  updateMarkup();\n}\n\nform.addEventListener('submit', handleSubmitForm);\n\nfunction updateMarkup() {\n  let markup;\n\n  if (localStorage.length === 0) {\n    markup = `<li class=\"list__item\">\n        <p class=\"list__desc\">You dont have deals</p>\n      </li>`;\n  } else {\n    let data = JSON.parse(localStorage.getItem('data'));\n    //     const markup = `<li class=\"list__item\">\n    //   <p class=\"list__desc\">All good</p>\n    //   <button class=\"done-btn\">Done</button>\n    //   <button class=\"edit-btn\">Edit</button>\n    //   <button class=\"delete-btn\">Delete</button>\n    // </li>`;\n  }\n  toDoListEl.innertHTML('beforeend', markup);\n}\n"],"names":["$5afbd4fb4df23c28$export$2e2bcd8739ae039","crypto","randomUUID","bind","$ecc82b4b4d5334a5$var$getRandomValues","$ecc82b4b4d5334a5$var$rnds8","Uint8Array","$ecc82b4b4d5334a5$export$2e2bcd8739ae039","getRandomValues","Error","$5ce84198744ccadf$var$byteToHex","i","push","toString","slice","$5ce84198744ccadf$export$8fb373d660548968","arr","offset","toLowerCase","$87befc68df50040c$export$2e2bcd8739ae039","options","buf","rnds","random","rng","$1f0dc3b9307be026$var$form","document","querySelector","$1f0dc3b9307be026$var$valueEl","$1f0dc3b9307be026$var$toDoListEl","$1f0dc3b9307be026$var$arrTasks","addEventListener","e","preventDefault","inputValue","value","task","id","priority","status","text","localStorage","setItem","JSON","stringify","markup","length","parse","getItem","innertHTML","$1f0dc3b9307be026$var$updateMarkup"],"version":3,"file":"index.c5426554.js.map"}